
SPI_Flash_Memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800340c  0800340c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003414  08003414  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800341c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ec  2000005c  08003478  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001448  08003478  00021448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007243  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001771  00000000  00000000  00027312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00028a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000514  00000000  00000000  00029168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020497  00000000  00000000  0002967c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d55  00000000  00000000  00049b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c49b5  00000000  00000000  00052868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f6c  00000000  00000000  00117220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0011918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080033a0 	.word	0x080033a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080033a0 	.word	0x080033a0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <csLOW>:
#define W25Q_Delay(time) HAL_Delay(time)
#define numBLOCK 64


void csLOW(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4802      	ldr	r0, [pc, #8]	; (80005e0 <csLOW+0x14>)
 80005d8:	f000 ffe8 	bl	80015ac <HAL_GPIO_WritePin>

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40020400 	.word	0x40020400

080005e4 <csHIGH>:

void csHIGH(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <csHIGH+0x14>)
 80005f0:	f000 ffdc 	bl	80015ac <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40020400 	.word	0x40020400

080005fc <SPI_Write>:

void SPI_Write(uint8_t *data, uint8_t len)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	b29a      	uxth	r2, r3
 800060c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <SPI_Write+0x24>)
 8000614:	f001 fd01 	bl	800201a <HAL_SPI_Transmit>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000078 	.word	0x20000078

08000624 <SPI_Read>:

void SPI_Read(uint8_t *data, uint32_t len)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f241 3388 	movw	r3, #5000	; 0x1388
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <SPI_Read+0x24>)
 800063a:	f001 fe2a 	bl	8002292 <HAL_SPI_Receive>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000078 	.word	0x20000078

0800064c <W25Q_Reset>:

void W25Q_Reset(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
    uint8_t tData[2];
    tData[0] = 0x66; // Con esta instrucción nos permite resetear televise
 8000652:	2366      	movs	r3, #102	; 0x66
 8000654:	713b      	strb	r3, [r7, #4]
    tData[1] = 0x99; // Reset
 8000656:	2399      	movs	r3, #153	; 0x99
 8000658:	717b      	strb	r3, [r7, #5]
    csLOW();
 800065a:	f7ff ffb7 	bl	80005cc <csLOW>
    SPI_Write(tData, 2);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffca 	bl	80005fc <SPI_Write>
    csHIGH();
 8000668:	f7ff ffbc 	bl	80005e4 <csHIGH>
    HAL_Delay(100);
 800066c:	2064      	movs	r0, #100	; 0x64
 800066e:	f000 fcd3 	bl	8001018 <HAL_Delay>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <W25Q_ReadID>:

uint32_t W25Q_ReadID(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
    uint8_t tData = 0x9F;
 8000680:	239f      	movs	r3, #159	; 0x9f
 8000682:	71fb      	strb	r3, [r7, #7]
    uint8_t rData[3];
    csLOW();
 8000684:	f7ff ffa2 	bl	80005cc <csLOW>
    SPI_Write(&tData, 1);
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	2101      	movs	r1, #1
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffb5 	bl	80005fc <SPI_Write>
    SPI_Read(rData, 3);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2103      	movs	r1, #3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffc4 	bl	8000624 <SPI_Read>
    csHIGH();
 800069c:	f7ff ffa2 	bl	80005e4 <csHIGH>
    return ((rData[0] << 16) | (rData[1] << 8) | rData[2]);
 80006a0:	793b      	ldrb	r3, [r7, #4]
 80006a2:	041a      	lsls	r2, r3, #16
 80006a4:	797b      	ldrb	r3, [r7, #5]
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	4313      	orrs	r3, r2
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	4313      	orrs	r3, r2
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <W25Q_Read>:

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b088      	sub	sp, #32
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	460b      	mov	r3, r1
 80006c4:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddr = (startPage*256) + offset;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	021a      	lsls	r2, r3, #8
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	4413      	add	r3, r2
 80006ce:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 80006d0:	2303      	movs	r3, #3
 80006d2:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	0c1b      	lsrs	r3, r3, #16
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	75fb      	strb	r3, [r7, #23]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 80006ea:	f7ff ff6f 	bl	80005cc <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2104      	movs	r1, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff81 	bl	80005fc <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f7ff ff91 	bl	8000624 <SPI_Read>
	csHIGH();  // pull the CS High
 8000702:	f7ff ff6f 	bl	80005e4 <csHIGH>
}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b088      	sub	sp, #32
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	460b      	mov	r3, r1
 800071c:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	021a      	lsls	r2, r3, #8
 8000722:	7afb      	ldrb	r3, [r7, #11]
 8000724:	4413      	add	r3, r2
 8000726:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x0B;  // enable Fast Read
 8000728:	230b      	movs	r3, #11
 800072a:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	0c1b      	lsrs	r3, r3, #16
 8000730:	b2db      	uxtb	r3, r3
 8000732:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b2db      	uxtb	r3, r3
 800073a:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;  // Dummy clock
 8000742:	2300      	movs	r3, #0
 8000744:	763b      	strb	r3, [r7, #24]
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
		tData[5] = 0;  // Dummy clock
	}

	csLOW();  // pull the CS Low
 8000746:	f7ff ff41 	bl	80005cc <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2105      	movs	r1, #5
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff53 	bl	80005fc <SPI_Write>
	else
	{
		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	6838      	ldr	r0, [r7, #0]
 800075a:	f7ff ff63 	bl	8000624 <SPI_Read>
	csHIGH();  // pull the CS High
 800075e:	f7ff ff41 	bl	80005e4 <csHIGH>
}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <write_enable>:

void write_enable(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
    uint8_t tData = 0x06;
 8000770:	2306      	movs	r3, #6
 8000772:	71fb      	strb	r3, [r7, #7]
    csLOW();
 8000774:	f7ff ff2a 	bl	80005cc <csLOW>
    SPI_Write(&tData, 1);
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	2101      	movs	r1, #1
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff3d 	bl	80005fc <SPI_Write>
    csHIGH();
 8000782:	f7ff ff2f 	bl	80005e4 <csHIGH>
    W25Q_Delay(5);
 8000786:	2005      	movs	r0, #5
 8000788:	f000 fc46 	bl	8001018 <HAL_Delay>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <write_disable>:

void write_disable(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
    uint8_t tData = 0x04;
 800079a:	2304      	movs	r3, #4
 800079c:	71fb      	strb	r3, [r7, #7]
    csLOW();
 800079e:	f7ff ff15 	bl	80005cc <csLOW>
    SPI_Write(&tData, 1);
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	2101      	movs	r1, #1
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff28 	bl	80005fc <SPI_Write>
    csHIGH();
 80007ac:	f7ff ff1a 	bl	80005e4 <csHIGH>
    W25Q_Delay(5);
 80007b0:	2005      	movs	r0, #5
 80007b2:	f000 fc31 	bl	8001018 <HAL_Delay>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <bytestowrite>:

uint32_t bytestowrite (uint32_t size, uint16_t offset)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 80007ca:	887a      	ldrh	r2, [r7, #2]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	2bff      	cmp	r3, #255	; 0xff
 80007d2:	d801      	bhi.n	80007d8 <bytestowrite+0x1a>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	e002      	b.n	80007de <bytestowrite+0x20>
	else return 256-offset;
 80007d8:	887b      	ldrh	r3, [r7, #2]
 80007da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <W25Q_Write_Page>:

    write_disable();
}

void W25Q_Write_Page (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 80007ea:	b590      	push	{r4, r7, lr}
 80007ec:	b0d5      	sub	sp, #340	; 0x154
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 80007f4:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
 80007f8:	6020      	str	r0, [r4, #0]
 80007fa:	4608      	mov	r0, r1
 80007fc:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000800:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000804:	600a      	str	r2, [r1, #0]
 8000806:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800080a:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000814:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8000818:	4602      	mov	r2, r0
 800081a:	801a      	strh	r2, [r3, #0]
void W25Q_Write_Page (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
 800081c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8000820:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000824:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000828:	601a      	str	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 800082a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800082e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8000838:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800083c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000846:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4413      	add	r3, r2
 800084e:	3b01      	subs	r3, #1
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000856:	4413      	add	r3, r2
 8000858:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	uint32_t numPages = endPage-startPage+1;
 800085c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000860:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	3301      	adds	r3, #1
 8000868:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint16_t startSector  = startPage/16;
 800086c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000870:	091b      	lsrs	r3, r3, #4
 8000872:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	uint16_t endSector  = endPage/16;
 8000876:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800087a:	091b      	lsrs	r3, r3, #4
 800087c:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	uint16_t numSectors = endSector-startSector+1;
 8000880:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000884:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	3301      	adds	r3, #1
 800088e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	for (uint16_t i=0; i<numSectors; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
 8000898:	e004      	b.n	80008a4 <W25Q_Write_Page+0xba>
 800089a:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 800089e:	3301      	adds	r3, #1
 80008a0:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
 80008a4:	f8b7 214a 	ldrh.w	r2, [r7, #330]	; 0x14a
 80008a8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d3f4      	bcc.n	800089a <W25Q_Write_Page+0xb0>
	{
		//W25Q_Erase_Sector(startSector++);
	}

	uint32_t dataPosition = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80008bc:	e0a5      	b.n	8000a0a <W25Q_Write_Page+0x220>
	{
		uint32_t memAddr = (startPage*256)+offset;
 80008be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80008c2:	021a      	lsls	r2, r3, #8
 80008c4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80008c8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		uint16_t bytesremaining  = bytestowrite(size, offset);
 80008d4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80008d8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80008dc:	881a      	ldrh	r2, [r3, #0]
 80008de:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80008e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80008e6:	4611      	mov	r1, r2
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	f7ff ff68 	bl	80007be <bytestowrite>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
        uint32_t indx = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        write_enable();
 80008fa:	f7ff ff36 	bl	800076a <write_enable>

        if (numBLOCK < 512) // Chip Size < 256Mb
        {
            tData[0] = 0x02; // page program
 80008fe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000902:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000906:	2202      	movs	r2, #2
 8000908:	701a      	strb	r2, [r3, #0]
            tData[1] = (memAddr >> 16) & 0xFF; // MSB of the memory Address
 800090a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800090e:	0c1b      	lsrs	r3, r3, #16
 8000910:	b2da      	uxtb	r2, r3
 8000912:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000916:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800091a:	705a      	strb	r2, [r3, #1]
            tData[2] = (memAddr >> 8) & 0xFF;
 800091c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b2da      	uxtb	r2, r3
 8000924:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000928:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800092c:	709a      	strb	r2, [r3, #2]
            tData[3] = (memAddr) & 0xFF; // LSB of the memory Address
 800092e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000932:	b2da      	uxtb	r2, r3
 8000934:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000938:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800093c:	70da      	strb	r2, [r3, #3]

            indx = 4;
 800093e:	2304      	movs	r3, #4
 8000940:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            tData[4] = (memAddr) & 0xFF; // LSB of the memory Address

            indx = 5;
        }

		uint16_t bytestosend  = bytesremaining + indx;
 8000944:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000948:	b29a      	uxth	r2, r3
 800094a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800094e:	4413      	add	r3, r2
 8000950:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120

		for (uint16_t i=0; i<bytesremaining; i++)
 8000954:	2300      	movs	r3, #0
 8000956:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 800095a:	e01a      	b.n	8000992 <W25Q_Write_Page+0x1a8>
		{
			tData[indx++] = data[i+dataPosition];
 800095c:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 8000960:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000964:	4413      	add	r3, r2
 8000966:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800096a:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800096e:	6812      	ldr	r2, [r2, #0]
 8000970:	441a      	add	r2, r3
 8000972:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000976:	1c59      	adds	r1, r3, #1
 8000978:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 800097c:	7811      	ldrb	r1, [r2, #0]
 800097e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000982:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000986:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 8000988:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 800098c:	3301      	adds	r3, #1
 800098e:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 8000992:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 8000996:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800099a:	429a      	cmp	r2, r3
 800099c:	d3de      	bcc.n	800095c <W25Q_Write_Page+0x172>
		}

		csLOW();
 800099e:	f7ff fe15 	bl	80005cc <csLOW>
		SPI_Write(tData, bytestosend);
 80009a2:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe24 	bl	80005fc <SPI_Write>
		csHIGH();
 80009b4:	f7ff fe16 	bl	80005e4 <csHIGH>

		startPage++;
 80009b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80009bc:	3301      	adds	r3, #1
 80009be:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		offset = 0;
 80009c2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80009c6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 80009ce:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 80009d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80009d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80009da:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80009de:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 80009e2:	6809      	ldr	r1, [r1, #0]
 80009e4:	1a8a      	subs	r2, r1, r2
 80009e6:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 80009e8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80009ec:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80009f0:	4413      	add	r3, r2
 80009f2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

		W25Q_Delay(5);
 80009f6:	2005      	movs	r0, #5
 80009f8:	f000 fb0e 	bl	8001018 <HAL_Delay>
		write_disable();
 80009fc:	f7ff feca 	bl	8000794 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 8000a00:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000a04:	3301      	adds	r3, #1
 8000a06:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000a0a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000a0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a12:	429a      	cmp	r2, r3
 8000a14:	f4ff af53 	bcc.w	80008be <W25Q_Write_Page+0xd4>
	    } while (status & 0x01); // 0x01 es el bit de ocupado/buscando en el registro de estado

	    csHIGH();
	}

}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}

08000a24 <main>:
/**
  * @brief The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    HAL_Init();
 8000a2a:	f000 fa83 	bl	8000f34 <HAL_Init>


    /* USER CODE END 1 */

    /* Configure the system clock */
    SystemClock_Config();
 8000a2e:	f000 f869 	bl	8000b04 <SystemClock_Config>

    /* USER CODE BEGIN 2 */
    MX_GPIO_Init();
 8000a32:	f000 f907 	bl	8000c44 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000a36:	f000 f8cf 	bl	8000bd8 <MX_SPI1_Init>

    W25Q_Reset();
 8000a3a:	f7ff fe07 	bl	800064c <W25Q_Reset>
    ID = W25Q_ReadID();
 8000a3e:	f7ff fe1c 	bl	800067a <W25Q_ReadID>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <main+0xcc>)
 8000a48:	601a      	str	r2, [r3, #0]

    if (ID == 0xFFFFFF)
 8000a4a:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <main+0xcc>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d120      	bne.n	8000a98 <main+0x74>
    {
        W25Q_Read(1, 85, 20, RxData);  // Read 20 bytes from Page 1 Offset 85
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <main+0xd0>)
 8000a58:	2214      	movs	r2, #20
 8000a5a:	2155      	movs	r1, #85	; 0x55
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fe2a 	bl	80006b6 <W25Q_Read>
        W25Q_FastRead(0, 0, 512, RxData);  // Read 512 bytes (2 Pages) from the start of Page 0
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <main+0xd0>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fe4f 	bl	800070e <W25Q_FastRead>

        W25Q_Read(17, 10, 20, RxData);  // Read 20 bytes from Page 17 Offset 10
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <main+0xd0>)
 8000a72:	2214      	movs	r2, #20
 8000a74:	210a      	movs	r1, #10
 8000a76:	2011      	movs	r0, #17
 8000a78:	f7ff fe1d 	bl	80006b6 <W25Q_Read>
        W25Q_FastRead(16, 0, 512, RxData);  // Read 512 bytes (2 Pages) from the start of Page 16
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <main+0xd0>)
 8000a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a82:	2100      	movs	r1, #0
 8000a84:	2010      	movs	r0, #16
 8000a86:	f7ff fe42 	bl	800070e <W25Q_FastRead>

        W25Q_FastRead(0, 0, 4608, RxData);  // Read 4608 bytes (18 Pages) from the start of Page 0
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <main+0xd0>)
 8000a8c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000a90:	2100      	movs	r1, #0
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fe3b 	bl	800070e <W25Q_FastRead>
    }
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    int offset = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
    while (1)
    {
        // Agregar la cadena especificada directamente en el bucle
        sprintf(TxData, "Hello from %d", indx++);
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <main+0xd4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	4915      	ldr	r1, [pc, #84]	; (8000af8 <main+0xd4>)
 8000aa4:	600a      	str	r2, [r1, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4914      	ldr	r1, [pc, #80]	; (8000afc <main+0xd8>)
 8000aaa:	4815      	ldr	r0, [pc, #84]	; (8000b00 <main+0xdc>)
 8000aac:	f001 ffd4 	bl	8002a58 <siprintf>
        W25Q_Write_Page(0, offset, strlen(TxData), TxData); // Corregir los valores pasados aquí
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <main+0xdc>)
 8000ab2:	f7ff fbb5 	bl	8000220 <strlen>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <main+0xdc>)
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fe94 	bl	80007ea <W25Q_Write_Page>
        HAL_Delay(1000);
 8000ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac6:	f000 faa7 	bl	8001018 <HAL_Delay>
        W25Q_Read(0, offset, 20, RxData);
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <main+0xd0>)
 8000acc:	2214      	movs	r2, #20
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fdf0 	bl	80006b6 <W25Q_Read>
        offset+= strlen(TxData);
 8000ad6:	480a      	ldr	r0, [pc, #40]	; (8000b00 <main+0xdc>)
 8000ad8:	f7ff fba2 	bl	8000220 <strlen>
 8000adc:	4602      	mov	r2, r0
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	607b      	str	r3, [r7, #4]

        HAL_Delay(500);
 8000ae4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae8:	f000 fa96 	bl	8001018 <HAL_Delay>
    {
 8000aec:	e7d6      	b.n	8000a9c <main+0x78>
 8000aee:	bf00      	nop
 8000af0:	200000d0 	.word	0x200000d0
 8000af4:	200000d4 	.word	0x200000d4
 8000af8:	200012f4 	.word	0x200012f4
 8000afc:	080033b8 	.word	0x080033b8
 8000b00:	200012d4 	.word	0x200012d4

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	; 0x50
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2234      	movs	r2, #52	; 0x34
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 ffc0 	bl	8002a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <SystemClock_Config+0xcc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <SystemClock_Config+0xcc>)
 8000b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <SystemClock_Config+0xcc>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <SystemClock_Config+0xd0>)
 8000b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <SystemClock_Config+0xd0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b78:	2364      	movs	r3, #100	; 0x64
 8000b7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 ff37 	bl	8001a00 <HAL_RCC_OscConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b98:	f000 f8b2 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	2103      	movs	r1, #3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fd35 	bl	8001628 <HAL_RCC_ClockConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bc4:	f000 f89c 	bl	8000d00 <Error_Handler>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3750      	adds	r7, #80	; 0x50
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40007000 	.word	0x40007000

08000bd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <MX_SPI1_Init+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c24:	220a      	movs	r2, #10
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c2a:	f001 f96d 	bl	8001f08 <HAL_SPI_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c34:	f000 f864 	bl	8000d00 <Error_Handler>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000078 	.word	0x20000078
 8000c40:	40013000 	.word	0x40013000

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c64:	f043 0310 	orr.w	r3, r3, #16
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	480a      	ldr	r0, [pc, #40]	; (8000cfc <MX_GPIO_Init+0xb8>)
 8000cd2:	f000 fc6b 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <MX_GPIO_Init+0xb8>)
 8000cdc:	f000 fc66 	bl	80015ac <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2009      	movs	r0, #9
 8000ce6:	f000 fa96 	bl	8001216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cea:	2009      	movs	r0, #9
 8000cec:	f000 faaf 	bl	800124e <HAL_NVIC_EnableIRQ>
}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_SPI_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12b      	bne.n	8000dd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000db6:	2338      	movs	r3, #56	; 0x38
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_SPI_MspInit+0x8c>)
 8000dd2:	f000 fa57 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020400 	.word	0x40020400

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f8ce 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000e44:	2008      	movs	r0, #8
 8000e46:	f000 fbcb 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f001 fe12 	bl	8002aa8 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20050000 	.word	0x20050000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	200012f8 	.word	0x200012f8
 8000eb8:	20001448 	.word	0x20001448

08000ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f0a:	f7ff ffd7 	bl	8000ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f001 fdd1 	bl	8002ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fd87 	bl	8000a24 <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f24:	0800341c 	.word	0x0800341c
  ldr r2, =_sbss
 8000f28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f2c:	20001448 	.word	0x20001448

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_Init+0x40>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_Init+0x40>)
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_Init+0x40>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f94f 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	200f      	movs	r0, #15
 8000f64:	f000 f808 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fed0 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x54>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x58>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f967 	bl	800126a <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00e      	b.n	8000fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d80a      	bhi.n	8000fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f000 f92f 	bl	8001216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_InitTick+0x5c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	200012fc 	.word	0x200012fc

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200012fc 	.word	0x200012fc

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff ffee 	bl	8001000 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_Delay+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103e:	bf00      	nop
 8001040:	f7ff ffde 	bl	8001000 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f7      	bhi.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__NVIC_EnableIRQ+0x38>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f7ff ff8e 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff29 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001228:	f7ff ff3e 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 800122c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff8e 	bl	8001154 <NVIC_EncodePriority>
 8001238:	4602      	mov	r2, r0
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5d 	bl	8001100 <__NVIC_SetPriority>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff31 	bl	80010c4 <__NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffa2 	bl	80011bc <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e165      	b.n	800156c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 8154 	bne.w	8001566 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d130      	bne.n	8001338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 0201 	and.w	r2, r3, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b03      	cmp	r3, #3
 8001342:	d017      	beq.n	8001374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80ae 	beq.w	8001566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b5d      	ldr	r3, [pc, #372]	; (8001584 <HAL_GPIO_Init+0x300>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a5c      	ldr	r2, [pc, #368]	; (8001584 <HAL_GPIO_Init+0x300>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <HAL_GPIO_Init+0x300>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001426:	4a58      	ldr	r2, [pc, #352]	; (8001588 <HAL_GPIO_Init+0x304>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4f      	ldr	r2, [pc, #316]	; (800158c <HAL_GPIO_Init+0x308>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_GPIO_Init+0x30c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_GPIO_Init+0x310>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_GPIO_Init+0x314>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x20e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_GPIO_Init+0x318>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x20a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4a      	ldr	r2, [pc, #296]	; (80015a0 <HAL_GPIO_Init+0x31c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x206>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <HAL_GPIO_Init+0x320>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x202>
 8001482:	2306      	movs	r3, #6
 8001484:	e00c      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 8001486:	2307      	movs	r3, #7
 8001488:	e00a      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 800148a:	2305      	movs	r3, #5
 800148c:	e008      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 800148e:	2304      	movs	r3, #4
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 8001492:	2303      	movs	r3, #3
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 800149e:	2300      	movs	r3, #0
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b0:	4935      	ldr	r1, [pc, #212]	; (8001588 <HAL_GPIO_Init+0x304>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_GPIO_Init+0x324>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e2:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <HAL_GPIO_Init+0x324>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_GPIO_Init+0x324>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800150c:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_GPIO_Init+0x324>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <HAL_GPIO_Init+0x324>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <HAL_GPIO_Init+0x324>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_GPIO_Init+0x324>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001560:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_GPIO_Init+0x324>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3301      	adds	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	2b0f      	cmp	r3, #15
 8001570:	f67f ae96 	bls.w	80012a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40013800 	.word	0x40013800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021400 	.word	0x40021400
 80015a4:	40021800 	.word	0x40021800
 80015a8:	40013c00 	.word	0x40013c00

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	619a      	str	r2, [r3, #24]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f806 	bl	8001610 <HAL_GPIO_EXTI_Callback>
  }
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40013c00 	.word	0x40013c00

08001610 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0cc      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d90c      	bls.n	8001664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b65      	ldr	r3, [pc, #404]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b8      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800169e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	494d      	ldr	r1, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d044      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d119      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d003      	beq.n	80016e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e067      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4934      	ldr	r1, [pc, #208]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff fc72 	bl	8001000 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff fc6e 	bl	8001000 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e04f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d20c      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e032      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4916      	ldr	r1, [pc, #88]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ae:	f000 f821 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fbd2 	bl	8000f78 <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	080033c8 	.word	0x080033c8
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f8:	b094      	sub	sp, #80	; 0x50
 80017fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001800:	2300      	movs	r3, #0
 8001802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001804:	2300      	movs	r3, #0
 8001806:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180c:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d00d      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x40>
 8001818:	2b08      	cmp	r3, #8
 800181a:	f200 80e1 	bhi.w	80019e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x34>
 8001822:	2b04      	cmp	r3, #4
 8001824:	d003      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x3a>
 8001826:	e0db      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800182c:	e0db      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001830:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001832:	e0d8      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001834:	4b6f      	ldr	r3, [pc, #444]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800183c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183e:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d063      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	2200      	movs	r2, #0
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
 8001854:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
 8001862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001866:	4622      	mov	r2, r4
 8001868:	462b      	mov	r3, r5
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0159      	lsls	r1, r3, #5
 8001874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001878:	0150      	lsls	r0, r2, #5
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4621      	mov	r1, r4
 8001880:	1a51      	subs	r1, r2, r1
 8001882:	6139      	str	r1, [r7, #16]
 8001884:	4629      	mov	r1, r5
 8001886:	eb63 0301 	sbc.w	r3, r3, r1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001898:	4659      	mov	r1, fp
 800189a:	018b      	lsls	r3, r1, #6
 800189c:	4651      	mov	r1, sl
 800189e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a2:	4651      	mov	r1, sl
 80018a4:	018a      	lsls	r2, r1, #6
 80018a6:	4651      	mov	r1, sl
 80018a8:	ebb2 0801 	subs.w	r8, r2, r1
 80018ac:	4659      	mov	r1, fp
 80018ae:	eb63 0901 	sbc.w	r9, r3, r1
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c6:	4690      	mov	r8, r2
 80018c8:	4699      	mov	r9, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	eb18 0303 	adds.w	r3, r8, r3
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	462b      	mov	r3, r5
 80018d4:	eb49 0303 	adc.w	r3, r9, r3
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018e6:	4629      	mov	r1, r5
 80018e8:	024b      	lsls	r3, r1, #9
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018f0:	4621      	mov	r1, r4
 80018f2:	024a      	lsls	r2, r1, #9
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fa:	2200      	movs	r2, #0
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001904:	f7fe fce4 	bl	80002d0 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001910:	e058      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	2200      	movs	r2, #0
 800191a:	4618      	mov	r0, r3
 800191c:	4611      	mov	r1, r2
 800191e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001922:	623b      	str	r3, [r7, #32]
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800192c:	4642      	mov	r2, r8
 800192e:	464b      	mov	r3, r9
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	f04f 0100 	mov.w	r1, #0
 8001938:	0159      	lsls	r1, r3, #5
 800193a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800193e:	0150      	lsls	r0, r2, #5
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4641      	mov	r1, r8
 8001946:	ebb2 0a01 	subs.w	sl, r2, r1
 800194a:	4649      	mov	r1, r9
 800194c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800195c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001964:	ebb2 040a 	subs.w	r4, r2, sl
 8001968:	eb63 050b 	sbc.w	r5, r3, fp
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	00eb      	lsls	r3, r5, #3
 8001976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197a:	00e2      	lsls	r2, r4, #3
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	4643      	mov	r3, r8
 8001982:	18e3      	adds	r3, r4, r3
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	464b      	mov	r3, r9
 8001988:	eb45 0303 	adc.w	r3, r5, r3
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199a:	4629      	mov	r1, r5
 800199c:	028b      	lsls	r3, r1, #10
 800199e:	4621      	mov	r1, r4
 80019a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a4:	4621      	mov	r1, r4
 80019a6:	028a      	lsls	r2, r1, #10
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ae:	2200      	movs	r2, #0
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	61fa      	str	r2, [r7, #28]
 80019b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019b8:	f7fe fc8a 	bl	80002d0 <__aeabi_uldivmod>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4613      	mov	r3, r2
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	3301      	adds	r3, #1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3750      	adds	r7, #80	; 0x50
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e273      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d075      	beq.n	8001b0a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d00c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2a:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d112      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a36:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a42:	d10b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	4b7e      	ldr	r3, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d05b      	beq.n	8001b08 <HAL_RCC_OscConfig+0x108>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d157      	bne.n	8001b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e24e      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d106      	bne.n	8001a74 <HAL_RCC_OscConfig+0x74>
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e01d      	b.n	8001ab0 <HAL_RCC_OscConfig+0xb0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x98>
 8001a7e:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6f      	ldr	r2, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b6d      	ldr	r3, [pc, #436]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6c      	ldr	r2, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xb0>
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a68      	ldr	r2, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a65      	ldr	r2, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff faa2 	bl	8001000 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fa9e 	bl	8001000 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e213      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xc0>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa8e 	bl	8001000 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fa8a 	bl	8001000 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1ff      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xe8>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d063      	beq.n	8001bde <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d11c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x152>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e1d3      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	e03a      	b.n	8001bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_RCC_OscConfig+0x244>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fa43 	bl	8001000 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fa3f 	bl	8001000 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1b4      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4925      	ldr	r1, [pc, #148]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
 8001bb0:	e015      	b.n	8001bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_RCC_OscConfig+0x244>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fa22 	bl	8001000 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fa1e 	bl	8001000 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e193      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d036      	beq.n	8001c58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d016      	beq.n	8001c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_RCC_OscConfig+0x248>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fa02 	bl	8001000 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff f9fe 	bl	8001000 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e173      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x200>
 8001c1e:	e01b      	b.n	8001c58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_OscConfig+0x248>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff f9eb 	bl	8001000 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e00e      	b.n	8001c4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f9e7 	bl	8001000 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d907      	bls.n	8001c4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e15c      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
 8001c40:	40023800 	.word	0x40023800
 8001c44:	42470000 	.word	0x42470000
 8001c48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	4b8a      	ldr	r3, [pc, #552]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ea      	bne.n	8001c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8097 	beq.w	8001d94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b83      	ldr	r3, [pc, #524]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10f      	bne.n	8001c96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a7e      	ldr	r2, [pc, #504]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b7c      	ldr	r3, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <HAL_RCC_OscConfig+0x47c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x47c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x47c>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff f9a7 	bl	8001000 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb6:	f7ff f9a3 	bl	8001000 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e118      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b6c      	ldr	r3, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x47c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x2ea>
 8001cdc:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a65      	ldr	r2, [pc, #404]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	e01c      	b.n	8001d24 <HAL_RCC_OscConfig+0x324>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x30c>
 8001cf2:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	4a60      	ldr	r2, [pc, #384]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	4b5e      	ldr	r3, [pc, #376]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a5d      	ldr	r2, [pc, #372]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0x324>
 8001d0c:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a59      	ldr	r2, [pc, #356]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
 8001d18:	4b57      	ldr	r3, [pc, #348]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a56      	ldr	r2, [pc, #344]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d1e:	f023 0304 	bic.w	r3, r3, #4
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d015      	beq.n	8001d58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f968 	bl	8001000 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff f964 	bl	8001000 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0d7      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0ee      	beq.n	8001d34 <HAL_RCC_OscConfig+0x334>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f952 	bl	8001000 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff f94e 	bl	8001000 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0c1      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d76:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ee      	bne.n	8001d60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80ad 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9e:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d060      	beq.n	8001e6c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d145      	bne.n	8001e3e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <HAL_RCC_OscConfig+0x480>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f922 	bl	8001000 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f91e 	bl	8001000 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e093      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	019b      	lsls	r3, r3, #6
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	3b01      	subs	r3, #1
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	071b      	lsls	r3, r3, #28
 8001e0a:	491b      	ldr	r1, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x480>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff f8f3 	bl	8001000 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f8ef 	bl	8001000 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e064      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x41e>
 8001e3c:	e05c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x480>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f8dc 	bl	8001000 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f8d8 	bl	8001000 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e04d      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x44c>
 8001e6a:	e045      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e040      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_RCC_OscConfig+0x504>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d030      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d129      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d122      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d119      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07b      	b.n	8002012 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d108      	bne.n	8001f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f2a:	d009      	beq.n	8001f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
 8001f32:	e005      	b.n	8001f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fefe 	bl	8000d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	ea42 0103 	orr.w	r1, r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	f003 0104 	and.w	r1, r3, #4
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f003 0210 	and.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b088      	sub	sp, #32
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_SPI_Transmit+0x22>
 8002038:	2302      	movs	r3, #2
 800203a:	e126      	b.n	800228a <HAL_SPI_Transmit+0x270>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002044:	f7fe ffdc 	bl	8001000 <HAL_GetTick>
 8002048:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d002      	beq.n	8002060 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800205e:	e10b      	b.n	8002278 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_SPI_Transmit+0x52>
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002070:	e102      	b.n	8002278 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2203      	movs	r2, #3
 8002076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b8:	d10f      	bne.n	80020da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	d007      	beq.n	80020f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002100:	d14b      	bne.n	800219a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_SPI_Transmit+0xf6>
 800210a:	8afb      	ldrh	r3, [r7, #22]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d13e      	bne.n	800218e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	1c9a      	adds	r2, r3, #2
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002134:	e02b      	b.n	800218e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d112      	bne.n	800216a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	1c9a      	adds	r2, r3, #2
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	; 0x36
 8002168:	e011      	b.n	800218e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800216a:	f7fe ff49 	bl	8001000 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d803      	bhi.n	8002182 <HAL_SPI_Transmit+0x168>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d102      	bne.n	8002188 <HAL_SPI_Transmit+0x16e>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800218c:	e074      	b.n	8002278 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ce      	bne.n	8002136 <HAL_SPI_Transmit+0x11c>
 8002198:	e04c      	b.n	8002234 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_SPI_Transmit+0x18e>
 80021a2:	8afb      	ldrh	r3, [r7, #22]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d140      	bne.n	800222a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	330c      	adds	r3, #12
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021ce:	e02c      	b.n	800222a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d113      	bne.n	8002206 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	330c      	adds	r3, #12
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	86da      	strh	r2, [r3, #54]	; 0x36
 8002204:	e011      	b.n	800222a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002206:	f7fe fefb 	bl	8001000 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d803      	bhi.n	800221e <HAL_SPI_Transmit+0x204>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d102      	bne.n	8002224 <HAL_SPI_Transmit+0x20a>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002228:	e026      	b.n	8002278 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1cd      	bne.n	80021d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fbcb 	bl	80029d4 <SPI_EndRxTxTransaction>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	77fb      	strb	r3, [r7, #31]
 8002274:	e000      	b.n	8002278 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002276:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002288:	7ffb      	ldrb	r3, [r7, #31]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b088      	sub	sp, #32
 8002296:	af02      	add	r7, sp, #8
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ae:	d112      	bne.n	80022d6 <HAL_SPI_Receive+0x44>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10e      	bne.n	80022d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2204      	movs	r2, #4
 80022bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	4613      	mov	r3, r2
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f8f1 	bl	80024b4 <HAL_SPI_TransmitReceive>
 80022d2:	4603      	mov	r3, r0
 80022d4:	e0ea      	b.n	80024ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_SPI_Receive+0x52>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e0e3      	b.n	80024ac <HAL_SPI_Receive+0x21a>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ec:	f7fe fe88 	bl	8001000 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
 8002300:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002302:	e0ca      	b.n	800249a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_SPI_Receive+0x7e>
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002314:	e0c1      	b.n	800249a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2204      	movs	r2, #4
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235c:	d10f      	bne.n	800237e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800236c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d007      	beq.n	800239c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800239a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d162      	bne.n	800246a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023a4:	e02e      	b.n	8002404 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d115      	bne.n	80023e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f103 020c 	add.w	r2, r3, #12
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023de:	e011      	b.n	8002404 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e0:	f7fe fe0e 	bl	8001000 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d803      	bhi.n	80023f8 <HAL_SPI_Receive+0x166>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d102      	bne.n	80023fe <HAL_SPI_Receive+0x16c>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002402:	e04a      	b.n	800249a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1cb      	bne.n	80023a6 <HAL_SPI_Receive+0x114>
 800240e:	e031      	b.n	8002474 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d113      	bne.n	8002446 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	b292      	uxth	r2, r2
 800242a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	1c9a      	adds	r2, r3, #2
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002444:	e011      	b.n	800246a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002446:	f7fe fddb 	bl	8001000 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d803      	bhi.n	800245e <HAL_SPI_Receive+0x1cc>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d102      	bne.n	8002464 <HAL_SPI_Receive+0x1d2>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002468:	e017      	b.n	800249a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1cd      	bne.n	8002410 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fa45 	bl	8002908 <SPI_EndRxTransaction>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
 8002496:	e000      	b.n	800249a <HAL_SPI_Receive+0x208>
  }

error :
 8002498:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024c2:	2301      	movs	r3, #1
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_SPI_TransmitReceive+0x26>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e18a      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x33c>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024e2:	f7fe fd8d 	bl	8001000 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002500:	2b01      	cmp	r3, #1
 8002502:	d00f      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x70>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800250a:	d107      	bne.n	800251c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <HAL_SPI_TransmitReceive+0x68>
 8002514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002518:	2b04      	cmp	r3, #4
 800251a:	d003      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002522:	e15b      	b.n	80027dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x82>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x82>
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800253c:	e14e      	b.n	80027dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b04      	cmp	r3, #4
 8002548:	d003      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2205      	movs	r2, #5
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b40      	cmp	r3, #64	; 0x40
 8002594:	d007      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ae:	d178      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_SPI_TransmitReceive+0x10a>
 80025b8:	8b7b      	ldrh	r3, [r7, #26]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d166      	bne.n	800268c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	1c9a      	adds	r2, r3, #2
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e2:	e053      	b.n	800268c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d11b      	bne.n	800262a <HAL_SPI_TransmitReceive+0x176>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_SPI_TransmitReceive+0x176>
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d113      	bne.n	800262a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	1c9a      	adds	r2, r3, #2
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d119      	bne.n	800266c <HAL_SPI_TransmitReceive+0x1b8>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d014      	beq.n	800266c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	b292      	uxth	r2, r2
 800264e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	1c9a      	adds	r2, r3, #2
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002668:	2301      	movs	r3, #1
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800266c:	f7fe fcc8 	bl	8001000 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002678:	429a      	cmp	r2, r3
 800267a:	d807      	bhi.n	800268c <HAL_SPI_TransmitReceive+0x1d8>
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002682:	d003      	beq.n	800268c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800268a:	e0a7      	b.n	80027dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1a6      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x130>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1a1      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x130>
 80026a0:	e07c      	b.n	800279c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x1fc>
 80026aa:	8b7b      	ldrh	r3, [r7, #26]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d16b      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	330c      	adds	r3, #12
 80026ba:	7812      	ldrb	r2, [r2, #0]
 80026bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d6:	e057      	b.n	8002788 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d11c      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x26c>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d017      	beq.n	8002720 <HAL_SPI_TransmitReceive+0x26c>
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d114      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d119      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x2ae>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d014      	beq.n	8002762 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800275e:	2301      	movs	r3, #1
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002762:	f7fe fc4d 	bl	8001000 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800276e:	429a      	cmp	r2, r3
 8002770:	d803      	bhi.n	800277a <HAL_SPI_TransmitReceive+0x2c6>
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d102      	bne.n	8002780 <HAL_SPI_TransmitReceive+0x2cc>
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002786:	e029      	b.n	80027dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1a2      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x224>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d19d      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f917 	bl	80029d4 <SPI_EndRxTxTransaction>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027b8:	e010      	b.n	80027dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	e000      	b.n	80027dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3730      	adds	r7, #48	; 0x30
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002808:	f7fe fbfa 	bl	8001000 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	4413      	add	r3, r2
 8002816:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002818:	f7fe fbf2 	bl	8001000 <HAL_GetTick>
 800281c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800281e:	4b39      	ldr	r3, [pc, #228]	; (8002904 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	015b      	lsls	r3, r3, #5
 8002824:	0d1b      	lsrs	r3, r3, #20
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800282e:	e054      	b.n	80028da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d050      	beq.n	80028da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002838:	f7fe fbe2 	bl	8001000 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	429a      	cmp	r2, r3
 8002846:	d902      	bls.n	800284e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d13d      	bne.n	80028ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800285c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002866:	d111      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002870:	d004      	beq.n	800287c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287a:	d107      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d10f      	bne.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e017      	b.n	80028fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4013      	ands	r3, r2
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d19b      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000000 	.word	0x20000000

08002908 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291c:	d111      	bne.n	8002942 <SPI_EndRxTransaction+0x3a>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002926:	d004      	beq.n	8002932 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002930:	d107      	bne.n	8002942 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294a:	d12a      	bne.n	80029a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002954:	d012      	beq.n	800297c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2200      	movs	r2, #0
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff ff49 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d02d      	beq.n	80029c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e026      	b.n	80029ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	2101      	movs	r1, #1
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff ff36 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01a      	beq.n	80029c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e013      	b.n	80029ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2101      	movs	r1, #1
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ff23 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e000      	b.n	80029ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <SPI_EndRxTxTransaction+0x7c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <SPI_EndRxTxTransaction+0x80>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fe:	d112      	bne.n	8002a26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2200      	movs	r2, #0
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7ff fef4 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e00f      	b.n	8002a46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d0f2      	beq.n	8002a26 <SPI_EndRxTxTransaction+0x52>
 8002a40:	e000      	b.n	8002a44 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a42:	bf00      	nop
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000
 8002a54:	165e9f81 	.word	0x165e9f81

08002a58 <siprintf>:
 8002a58:	b40e      	push	{r1, r2, r3}
 8002a5a:	b500      	push	{lr}
 8002a5c:	b09c      	sub	sp, #112	; 0x70
 8002a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8002a60:	9002      	str	r0, [sp, #8]
 8002a62:	9006      	str	r0, [sp, #24]
 8002a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a68:	4809      	ldr	r0, [pc, #36]	; (8002a90 <siprintf+0x38>)
 8002a6a:	9107      	str	r1, [sp, #28]
 8002a6c:	9104      	str	r1, [sp, #16]
 8002a6e:	4909      	ldr	r1, [pc, #36]	; (8002a94 <siprintf+0x3c>)
 8002a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a74:	9105      	str	r1, [sp, #20]
 8002a76:	6800      	ldr	r0, [r0, #0]
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	a902      	add	r1, sp, #8
 8002a7c:	f000 f992 	bl	8002da4 <_svfiprintf_r>
 8002a80:	9b02      	ldr	r3, [sp, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	b01c      	add	sp, #112	; 0x70
 8002a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a8c:	b003      	add	sp, #12
 8002a8e:	4770      	bx	lr
 8002a90:	20000058 	.word	0x20000058
 8002a94:	ffff0208 	.word	0xffff0208

08002a98 <memset>:
 8002a98:	4402      	add	r2, r0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d100      	bne.n	8002aa2 <memset+0xa>
 8002aa0:	4770      	bx	lr
 8002aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa6:	e7f9      	b.n	8002a9c <memset+0x4>

08002aa8 <__errno>:
 8002aa8:	4b01      	ldr	r3, [pc, #4]	; (8002ab0 <__errno+0x8>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000058 	.word	0x20000058

08002ab4 <__libc_init_array>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	4d0d      	ldr	r5, [pc, #52]	; (8002aec <__libc_init_array+0x38>)
 8002ab8:	4c0d      	ldr	r4, [pc, #52]	; (8002af0 <__libc_init_array+0x3c>)
 8002aba:	1b64      	subs	r4, r4, r5
 8002abc:	10a4      	asrs	r4, r4, #2
 8002abe:	2600      	movs	r6, #0
 8002ac0:	42a6      	cmp	r6, r4
 8002ac2:	d109      	bne.n	8002ad8 <__libc_init_array+0x24>
 8002ac4:	4d0b      	ldr	r5, [pc, #44]	; (8002af4 <__libc_init_array+0x40>)
 8002ac6:	4c0c      	ldr	r4, [pc, #48]	; (8002af8 <__libc_init_array+0x44>)
 8002ac8:	f000 fc6a 	bl	80033a0 <_init>
 8002acc:	1b64      	subs	r4, r4, r5
 8002ace:	10a4      	asrs	r4, r4, #2
 8002ad0:	2600      	movs	r6, #0
 8002ad2:	42a6      	cmp	r6, r4
 8002ad4:	d105      	bne.n	8002ae2 <__libc_init_array+0x2e>
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
 8002ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002adc:	4798      	blx	r3
 8002ade:	3601      	adds	r6, #1
 8002ae0:	e7ee      	b.n	8002ac0 <__libc_init_array+0xc>
 8002ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae6:	4798      	blx	r3
 8002ae8:	3601      	adds	r6, #1
 8002aea:	e7f2      	b.n	8002ad2 <__libc_init_array+0x1e>
 8002aec:	08003414 	.word	0x08003414
 8002af0:	08003414 	.word	0x08003414
 8002af4:	08003414 	.word	0x08003414
 8002af8:	08003418 	.word	0x08003418

08002afc <__retarget_lock_acquire_recursive>:
 8002afc:	4770      	bx	lr

08002afe <__retarget_lock_release_recursive>:
 8002afe:	4770      	bx	lr

08002b00 <_free_r>:
 8002b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b02:	2900      	cmp	r1, #0
 8002b04:	d044      	beq.n	8002b90 <_free_r+0x90>
 8002b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b0a:	9001      	str	r0, [sp, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8002b12:	bfb8      	it	lt
 8002b14:	18e4      	addlt	r4, r4, r3
 8002b16:	f000 f8df 	bl	8002cd8 <__malloc_lock>
 8002b1a:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <_free_r+0x94>)
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	b933      	cbnz	r3, 8002b30 <_free_r+0x30>
 8002b22:	6063      	str	r3, [r4, #4]
 8002b24:	6014      	str	r4, [r2, #0]
 8002b26:	b003      	add	sp, #12
 8002b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b2c:	f000 b8da 	b.w	8002ce4 <__malloc_unlock>
 8002b30:	42a3      	cmp	r3, r4
 8002b32:	d908      	bls.n	8002b46 <_free_r+0x46>
 8002b34:	6825      	ldr	r5, [r4, #0]
 8002b36:	1961      	adds	r1, r4, r5
 8002b38:	428b      	cmp	r3, r1
 8002b3a:	bf01      	itttt	eq
 8002b3c:	6819      	ldreq	r1, [r3, #0]
 8002b3e:	685b      	ldreq	r3, [r3, #4]
 8002b40:	1949      	addeq	r1, r1, r5
 8002b42:	6021      	streq	r1, [r4, #0]
 8002b44:	e7ed      	b.n	8002b22 <_free_r+0x22>
 8002b46:	461a      	mov	r2, r3
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b10b      	cbz	r3, 8002b50 <_free_r+0x50>
 8002b4c:	42a3      	cmp	r3, r4
 8002b4e:	d9fa      	bls.n	8002b46 <_free_r+0x46>
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	1855      	adds	r5, r2, r1
 8002b54:	42a5      	cmp	r5, r4
 8002b56:	d10b      	bne.n	8002b70 <_free_r+0x70>
 8002b58:	6824      	ldr	r4, [r4, #0]
 8002b5a:	4421      	add	r1, r4
 8002b5c:	1854      	adds	r4, r2, r1
 8002b5e:	42a3      	cmp	r3, r4
 8002b60:	6011      	str	r1, [r2, #0]
 8002b62:	d1e0      	bne.n	8002b26 <_free_r+0x26>
 8002b64:	681c      	ldr	r4, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	6053      	str	r3, [r2, #4]
 8002b6a:	440c      	add	r4, r1
 8002b6c:	6014      	str	r4, [r2, #0]
 8002b6e:	e7da      	b.n	8002b26 <_free_r+0x26>
 8002b70:	d902      	bls.n	8002b78 <_free_r+0x78>
 8002b72:	230c      	movs	r3, #12
 8002b74:	6003      	str	r3, [r0, #0]
 8002b76:	e7d6      	b.n	8002b26 <_free_r+0x26>
 8002b78:	6825      	ldr	r5, [r4, #0]
 8002b7a:	1961      	adds	r1, r4, r5
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	bf04      	itt	eq
 8002b80:	6819      	ldreq	r1, [r3, #0]
 8002b82:	685b      	ldreq	r3, [r3, #4]
 8002b84:	6063      	str	r3, [r4, #4]
 8002b86:	bf04      	itt	eq
 8002b88:	1949      	addeq	r1, r1, r5
 8002b8a:	6021      	streq	r1, [r4, #0]
 8002b8c:	6054      	str	r4, [r2, #4]
 8002b8e:	e7ca      	b.n	8002b26 <_free_r+0x26>
 8002b90:	b003      	add	sp, #12
 8002b92:	bd30      	pop	{r4, r5, pc}
 8002b94:	20001440 	.word	0x20001440

08002b98 <sbrk_aligned>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	4e0e      	ldr	r6, [pc, #56]	; (8002bd4 <sbrk_aligned+0x3c>)
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	6831      	ldr	r1, [r6, #0]
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	b911      	cbnz	r1, 8002baa <sbrk_aligned+0x12>
 8002ba4:	f000 fba6 	bl	80032f4 <_sbrk_r>
 8002ba8:	6030      	str	r0, [r6, #0]
 8002baa:	4621      	mov	r1, r4
 8002bac:	4628      	mov	r0, r5
 8002bae:	f000 fba1 	bl	80032f4 <_sbrk_r>
 8002bb2:	1c43      	adds	r3, r0, #1
 8002bb4:	d00a      	beq.n	8002bcc <sbrk_aligned+0x34>
 8002bb6:	1cc4      	adds	r4, r0, #3
 8002bb8:	f024 0403 	bic.w	r4, r4, #3
 8002bbc:	42a0      	cmp	r0, r4
 8002bbe:	d007      	beq.n	8002bd0 <sbrk_aligned+0x38>
 8002bc0:	1a21      	subs	r1, r4, r0
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f000 fb96 	bl	80032f4 <_sbrk_r>
 8002bc8:	3001      	adds	r0, #1
 8002bca:	d101      	bne.n	8002bd0 <sbrk_aligned+0x38>
 8002bcc:	f04f 34ff 	mov.w	r4, #4294967295
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	20001444 	.word	0x20001444

08002bd8 <_malloc_r>:
 8002bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bdc:	1ccd      	adds	r5, r1, #3
 8002bde:	f025 0503 	bic.w	r5, r5, #3
 8002be2:	3508      	adds	r5, #8
 8002be4:	2d0c      	cmp	r5, #12
 8002be6:	bf38      	it	cc
 8002be8:	250c      	movcc	r5, #12
 8002bea:	2d00      	cmp	r5, #0
 8002bec:	4607      	mov	r7, r0
 8002bee:	db01      	blt.n	8002bf4 <_malloc_r+0x1c>
 8002bf0:	42a9      	cmp	r1, r5
 8002bf2:	d905      	bls.n	8002c00 <_malloc_r+0x28>
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002cd4 <_malloc_r+0xfc>
 8002c04:	f000 f868 	bl	8002cd8 <__malloc_lock>
 8002c08:	f8d8 3000 	ldr.w	r3, [r8]
 8002c0c:	461c      	mov	r4, r3
 8002c0e:	bb5c      	cbnz	r4, 8002c68 <_malloc_r+0x90>
 8002c10:	4629      	mov	r1, r5
 8002c12:	4638      	mov	r0, r7
 8002c14:	f7ff ffc0 	bl	8002b98 <sbrk_aligned>
 8002c18:	1c43      	adds	r3, r0, #1
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	d155      	bne.n	8002cca <_malloc_r+0xf2>
 8002c1e:	f8d8 4000 	ldr.w	r4, [r8]
 8002c22:	4626      	mov	r6, r4
 8002c24:	2e00      	cmp	r6, #0
 8002c26:	d145      	bne.n	8002cb4 <_malloc_r+0xdc>
 8002c28:	2c00      	cmp	r4, #0
 8002c2a:	d048      	beq.n	8002cbe <_malloc_r+0xe6>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	4631      	mov	r1, r6
 8002c30:	4638      	mov	r0, r7
 8002c32:	eb04 0903 	add.w	r9, r4, r3
 8002c36:	f000 fb5d 	bl	80032f4 <_sbrk_r>
 8002c3a:	4581      	cmp	r9, r0
 8002c3c:	d13f      	bne.n	8002cbe <_malloc_r+0xe6>
 8002c3e:	6821      	ldr	r1, [r4, #0]
 8002c40:	1a6d      	subs	r5, r5, r1
 8002c42:	4629      	mov	r1, r5
 8002c44:	4638      	mov	r0, r7
 8002c46:	f7ff ffa7 	bl	8002b98 <sbrk_aligned>
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	d037      	beq.n	8002cbe <_malloc_r+0xe6>
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	442b      	add	r3, r5
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	f8d8 3000 	ldr.w	r3, [r8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d038      	beq.n	8002cce <_malloc_r+0xf6>
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	42a2      	cmp	r2, r4
 8002c60:	d12b      	bne.n	8002cba <_malloc_r+0xe2>
 8002c62:	2200      	movs	r2, #0
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	e00f      	b.n	8002c88 <_malloc_r+0xb0>
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	1b52      	subs	r2, r2, r5
 8002c6c:	d41f      	bmi.n	8002cae <_malloc_r+0xd6>
 8002c6e:	2a0b      	cmp	r2, #11
 8002c70:	d917      	bls.n	8002ca2 <_malloc_r+0xca>
 8002c72:	1961      	adds	r1, r4, r5
 8002c74:	42a3      	cmp	r3, r4
 8002c76:	6025      	str	r5, [r4, #0]
 8002c78:	bf18      	it	ne
 8002c7a:	6059      	strne	r1, [r3, #4]
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	bf08      	it	eq
 8002c80:	f8c8 1000 	streq.w	r1, [r8]
 8002c84:	5162      	str	r2, [r4, r5]
 8002c86:	604b      	str	r3, [r1, #4]
 8002c88:	4638      	mov	r0, r7
 8002c8a:	f104 060b 	add.w	r6, r4, #11
 8002c8e:	f000 f829 	bl	8002ce4 <__malloc_unlock>
 8002c92:	f026 0607 	bic.w	r6, r6, #7
 8002c96:	1d23      	adds	r3, r4, #4
 8002c98:	1af2      	subs	r2, r6, r3
 8002c9a:	d0ae      	beq.n	8002bfa <_malloc_r+0x22>
 8002c9c:	1b9b      	subs	r3, r3, r6
 8002c9e:	50a3      	str	r3, [r4, r2]
 8002ca0:	e7ab      	b.n	8002bfa <_malloc_r+0x22>
 8002ca2:	42a3      	cmp	r3, r4
 8002ca4:	6862      	ldr	r2, [r4, #4]
 8002ca6:	d1dd      	bne.n	8002c64 <_malloc_r+0x8c>
 8002ca8:	f8c8 2000 	str.w	r2, [r8]
 8002cac:	e7ec      	b.n	8002c88 <_malloc_r+0xb0>
 8002cae:	4623      	mov	r3, r4
 8002cb0:	6864      	ldr	r4, [r4, #4]
 8002cb2:	e7ac      	b.n	8002c0e <_malloc_r+0x36>
 8002cb4:	4634      	mov	r4, r6
 8002cb6:	6876      	ldr	r6, [r6, #4]
 8002cb8:	e7b4      	b.n	8002c24 <_malloc_r+0x4c>
 8002cba:	4613      	mov	r3, r2
 8002cbc:	e7cc      	b.n	8002c58 <_malloc_r+0x80>
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	f000 f80e 	bl	8002ce4 <__malloc_unlock>
 8002cc8:	e797      	b.n	8002bfa <_malloc_r+0x22>
 8002cca:	6025      	str	r5, [r4, #0]
 8002ccc:	e7dc      	b.n	8002c88 <_malloc_r+0xb0>
 8002cce:	605b      	str	r3, [r3, #4]
 8002cd0:	deff      	udf	#255	; 0xff
 8002cd2:	bf00      	nop
 8002cd4:	20001440 	.word	0x20001440

08002cd8 <__malloc_lock>:
 8002cd8:	4801      	ldr	r0, [pc, #4]	; (8002ce0 <__malloc_lock+0x8>)
 8002cda:	f7ff bf0f 	b.w	8002afc <__retarget_lock_acquire_recursive>
 8002cde:	bf00      	nop
 8002ce0:	2000143c 	.word	0x2000143c

08002ce4 <__malloc_unlock>:
 8002ce4:	4801      	ldr	r0, [pc, #4]	; (8002cec <__malloc_unlock+0x8>)
 8002ce6:	f7ff bf0a 	b.w	8002afe <__retarget_lock_release_recursive>
 8002cea:	bf00      	nop
 8002cec:	2000143c 	.word	0x2000143c

08002cf0 <__ssputs_r>:
 8002cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf4:	688e      	ldr	r6, [r1, #8]
 8002cf6:	461f      	mov	r7, r3
 8002cf8:	42be      	cmp	r6, r7
 8002cfa:	680b      	ldr	r3, [r1, #0]
 8002cfc:	4682      	mov	sl, r0
 8002cfe:	460c      	mov	r4, r1
 8002d00:	4690      	mov	r8, r2
 8002d02:	d82c      	bhi.n	8002d5e <__ssputs_r+0x6e>
 8002d04:	898a      	ldrh	r2, [r1, #12]
 8002d06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d0a:	d026      	beq.n	8002d5a <__ssputs_r+0x6a>
 8002d0c:	6965      	ldr	r5, [r4, #20]
 8002d0e:	6909      	ldr	r1, [r1, #16]
 8002d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d14:	eba3 0901 	sub.w	r9, r3, r1
 8002d18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d1c:	1c7b      	adds	r3, r7, #1
 8002d1e:	444b      	add	r3, r9
 8002d20:	106d      	asrs	r5, r5, #1
 8002d22:	429d      	cmp	r5, r3
 8002d24:	bf38      	it	cc
 8002d26:	461d      	movcc	r5, r3
 8002d28:	0553      	lsls	r3, r2, #21
 8002d2a:	d527      	bpl.n	8002d7c <__ssputs_r+0x8c>
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f7ff ff53 	bl	8002bd8 <_malloc_r>
 8002d32:	4606      	mov	r6, r0
 8002d34:	b360      	cbz	r0, 8002d90 <__ssputs_r+0xa0>
 8002d36:	6921      	ldr	r1, [r4, #16]
 8002d38:	464a      	mov	r2, r9
 8002d3a:	f000 faeb 	bl	8003314 <memcpy>
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d48:	81a3      	strh	r3, [r4, #12]
 8002d4a:	6126      	str	r6, [r4, #16]
 8002d4c:	6165      	str	r5, [r4, #20]
 8002d4e:	444e      	add	r6, r9
 8002d50:	eba5 0509 	sub.w	r5, r5, r9
 8002d54:	6026      	str	r6, [r4, #0]
 8002d56:	60a5      	str	r5, [r4, #8]
 8002d58:	463e      	mov	r6, r7
 8002d5a:	42be      	cmp	r6, r7
 8002d5c:	d900      	bls.n	8002d60 <__ssputs_r+0x70>
 8002d5e:	463e      	mov	r6, r7
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	4632      	mov	r2, r6
 8002d64:	4641      	mov	r1, r8
 8002d66:	f000 faab 	bl	80032c0 <memmove>
 8002d6a:	68a3      	ldr	r3, [r4, #8]
 8002d6c:	1b9b      	subs	r3, r3, r6
 8002d6e:	60a3      	str	r3, [r4, #8]
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	4433      	add	r3, r6
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	2000      	movs	r0, #0
 8002d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d7c:	462a      	mov	r2, r5
 8002d7e:	f000 fad7 	bl	8003330 <_realloc_r>
 8002d82:	4606      	mov	r6, r0
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d1e0      	bne.n	8002d4a <__ssputs_r+0x5a>
 8002d88:	6921      	ldr	r1, [r4, #16]
 8002d8a:	4650      	mov	r0, sl
 8002d8c:	f7ff feb8 	bl	8002b00 <_free_r>
 8002d90:	230c      	movs	r3, #12
 8002d92:	f8ca 3000 	str.w	r3, [sl]
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002da2:	e7e9      	b.n	8002d78 <__ssputs_r+0x88>

08002da4 <_svfiprintf_r>:
 8002da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da8:	4698      	mov	r8, r3
 8002daa:	898b      	ldrh	r3, [r1, #12]
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	b09d      	sub	sp, #116	; 0x74
 8002db0:	4607      	mov	r7, r0
 8002db2:	460d      	mov	r5, r1
 8002db4:	4614      	mov	r4, r2
 8002db6:	d50e      	bpl.n	8002dd6 <_svfiprintf_r+0x32>
 8002db8:	690b      	ldr	r3, [r1, #16]
 8002dba:	b963      	cbnz	r3, 8002dd6 <_svfiprintf_r+0x32>
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	f7ff ff0b 	bl	8002bd8 <_malloc_r>
 8002dc2:	6028      	str	r0, [r5, #0]
 8002dc4:	6128      	str	r0, [r5, #16]
 8002dc6:	b920      	cbnz	r0, 8002dd2 <_svfiprintf_r+0x2e>
 8002dc8:	230c      	movs	r3, #12
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	e0d0      	b.n	8002f74 <_svfiprintf_r+0x1d0>
 8002dd2:	2340      	movs	r3, #64	; 0x40
 8002dd4:	616b      	str	r3, [r5, #20]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dda:	2320      	movs	r3, #32
 8002ddc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002de4:	2330      	movs	r3, #48	; 0x30
 8002de6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f8c <_svfiprintf_r+0x1e8>
 8002dea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dee:	f04f 0901 	mov.w	r9, #1
 8002df2:	4623      	mov	r3, r4
 8002df4:	469a      	mov	sl, r3
 8002df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dfa:	b10a      	cbz	r2, 8002e00 <_svfiprintf_r+0x5c>
 8002dfc:	2a25      	cmp	r2, #37	; 0x25
 8002dfe:	d1f9      	bne.n	8002df4 <_svfiprintf_r+0x50>
 8002e00:	ebba 0b04 	subs.w	fp, sl, r4
 8002e04:	d00b      	beq.n	8002e1e <_svfiprintf_r+0x7a>
 8002e06:	465b      	mov	r3, fp
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	4638      	mov	r0, r7
 8002e0e:	f7ff ff6f 	bl	8002cf0 <__ssputs_r>
 8002e12:	3001      	adds	r0, #1
 8002e14:	f000 80a9 	beq.w	8002f6a <_svfiprintf_r+0x1c6>
 8002e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e1a:	445a      	add	r2, fp
 8002e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8002e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80a1 	beq.w	8002f6a <_svfiprintf_r+0x1c6>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e32:	f10a 0a01 	add.w	sl, sl, #1
 8002e36:	9304      	str	r3, [sp, #16]
 8002e38:	9307      	str	r3, [sp, #28]
 8002e3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e3e:	931a      	str	r3, [sp, #104]	; 0x68
 8002e40:	4654      	mov	r4, sl
 8002e42:	2205      	movs	r2, #5
 8002e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e48:	4850      	ldr	r0, [pc, #320]	; (8002f8c <_svfiprintf_r+0x1e8>)
 8002e4a:	f7fd f9f1 	bl	8000230 <memchr>
 8002e4e:	9a04      	ldr	r2, [sp, #16]
 8002e50:	b9d8      	cbnz	r0, 8002e8a <_svfiprintf_r+0xe6>
 8002e52:	06d0      	lsls	r0, r2, #27
 8002e54:	bf44      	itt	mi
 8002e56:	2320      	movmi	r3, #32
 8002e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e5c:	0711      	lsls	r1, r2, #28
 8002e5e:	bf44      	itt	mi
 8002e60:	232b      	movmi	r3, #43	; 0x2b
 8002e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e66:	f89a 3000 	ldrb.w	r3, [sl]
 8002e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e6c:	d015      	beq.n	8002e9a <_svfiprintf_r+0xf6>
 8002e6e:	9a07      	ldr	r2, [sp, #28]
 8002e70:	4654      	mov	r4, sl
 8002e72:	2000      	movs	r0, #0
 8002e74:	f04f 0c0a 	mov.w	ip, #10
 8002e78:	4621      	mov	r1, r4
 8002e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e7e:	3b30      	subs	r3, #48	; 0x30
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d94d      	bls.n	8002f20 <_svfiprintf_r+0x17c>
 8002e84:	b1b0      	cbz	r0, 8002eb4 <_svfiprintf_r+0x110>
 8002e86:	9207      	str	r2, [sp, #28]
 8002e88:	e014      	b.n	8002eb4 <_svfiprintf_r+0x110>
 8002e8a:	eba0 0308 	sub.w	r3, r0, r8
 8002e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8002e92:	4313      	orrs	r3, r2
 8002e94:	9304      	str	r3, [sp, #16]
 8002e96:	46a2      	mov	sl, r4
 8002e98:	e7d2      	b.n	8002e40 <_svfiprintf_r+0x9c>
 8002e9a:	9b03      	ldr	r3, [sp, #12]
 8002e9c:	1d19      	adds	r1, r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	9103      	str	r1, [sp, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bfbb      	ittet	lt
 8002ea6:	425b      	neglt	r3, r3
 8002ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8002eac:	9307      	strge	r3, [sp, #28]
 8002eae:	9307      	strlt	r3, [sp, #28]
 8002eb0:	bfb8      	it	lt
 8002eb2:	9204      	strlt	r2, [sp, #16]
 8002eb4:	7823      	ldrb	r3, [r4, #0]
 8002eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8002eb8:	d10c      	bne.n	8002ed4 <_svfiprintf_r+0x130>
 8002eba:	7863      	ldrb	r3, [r4, #1]
 8002ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ebe:	d134      	bne.n	8002f2a <_svfiprintf_r+0x186>
 8002ec0:	9b03      	ldr	r3, [sp, #12]
 8002ec2:	1d1a      	adds	r2, r3, #4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	9203      	str	r2, [sp, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bfb8      	it	lt
 8002ecc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ed0:	3402      	adds	r4, #2
 8002ed2:	9305      	str	r3, [sp, #20]
 8002ed4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002f9c <_svfiprintf_r+0x1f8>
 8002ed8:	7821      	ldrb	r1, [r4, #0]
 8002eda:	2203      	movs	r2, #3
 8002edc:	4650      	mov	r0, sl
 8002ede:	f7fd f9a7 	bl	8000230 <memchr>
 8002ee2:	b138      	cbz	r0, 8002ef4 <_svfiprintf_r+0x150>
 8002ee4:	9b04      	ldr	r3, [sp, #16]
 8002ee6:	eba0 000a 	sub.w	r0, r0, sl
 8002eea:	2240      	movs	r2, #64	; 0x40
 8002eec:	4082      	lsls	r2, r0
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	3401      	adds	r4, #1
 8002ef2:	9304      	str	r3, [sp, #16]
 8002ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ef8:	4825      	ldr	r0, [pc, #148]	; (8002f90 <_svfiprintf_r+0x1ec>)
 8002efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002efe:	2206      	movs	r2, #6
 8002f00:	f7fd f996 	bl	8000230 <memchr>
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d038      	beq.n	8002f7a <_svfiprintf_r+0x1d6>
 8002f08:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <_svfiprintf_r+0x1f0>)
 8002f0a:	bb1b      	cbnz	r3, 8002f54 <_svfiprintf_r+0x1b0>
 8002f0c:	9b03      	ldr	r3, [sp, #12]
 8002f0e:	3307      	adds	r3, #7
 8002f10:	f023 0307 	bic.w	r3, r3, #7
 8002f14:	3308      	adds	r3, #8
 8002f16:	9303      	str	r3, [sp, #12]
 8002f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f1a:	4433      	add	r3, r6
 8002f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1e:	e768      	b.n	8002df2 <_svfiprintf_r+0x4e>
 8002f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f24:	460c      	mov	r4, r1
 8002f26:	2001      	movs	r0, #1
 8002f28:	e7a6      	b.n	8002e78 <_svfiprintf_r+0xd4>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	3401      	adds	r4, #1
 8002f2e:	9305      	str	r3, [sp, #20]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f04f 0c0a 	mov.w	ip, #10
 8002f36:	4620      	mov	r0, r4
 8002f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f3c:	3a30      	subs	r2, #48	; 0x30
 8002f3e:	2a09      	cmp	r2, #9
 8002f40:	d903      	bls.n	8002f4a <_svfiprintf_r+0x1a6>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0c6      	beq.n	8002ed4 <_svfiprintf_r+0x130>
 8002f46:	9105      	str	r1, [sp, #20]
 8002f48:	e7c4      	b.n	8002ed4 <_svfiprintf_r+0x130>
 8002f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f4e:	4604      	mov	r4, r0
 8002f50:	2301      	movs	r3, #1
 8002f52:	e7f0      	b.n	8002f36 <_svfiprintf_r+0x192>
 8002f54:	ab03      	add	r3, sp, #12
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	462a      	mov	r2, r5
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <_svfiprintf_r+0x1f4>)
 8002f5c:	a904      	add	r1, sp, #16
 8002f5e:	4638      	mov	r0, r7
 8002f60:	f3af 8000 	nop.w
 8002f64:	1c42      	adds	r2, r0, #1
 8002f66:	4606      	mov	r6, r0
 8002f68:	d1d6      	bne.n	8002f18 <_svfiprintf_r+0x174>
 8002f6a:	89ab      	ldrh	r3, [r5, #12]
 8002f6c:	065b      	lsls	r3, r3, #25
 8002f6e:	f53f af2d 	bmi.w	8002dcc <_svfiprintf_r+0x28>
 8002f72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f74:	b01d      	add	sp, #116	; 0x74
 8002f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f7a:	ab03      	add	r3, sp, #12
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	462a      	mov	r2, r5
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <_svfiprintf_r+0x1f4>)
 8002f82:	a904      	add	r1, sp, #16
 8002f84:	4638      	mov	r0, r7
 8002f86:	f000 f879 	bl	800307c <_printf_i>
 8002f8a:	e7eb      	b.n	8002f64 <_svfiprintf_r+0x1c0>
 8002f8c:	080033d8 	.word	0x080033d8
 8002f90:	080033e2 	.word	0x080033e2
 8002f94:	00000000 	.word	0x00000000
 8002f98:	08002cf1 	.word	0x08002cf1
 8002f9c:	080033de 	.word	0x080033de

08002fa0 <_printf_common>:
 8002fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa4:	4616      	mov	r6, r2
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	688a      	ldr	r2, [r1, #8]
 8002faa:	690b      	ldr	r3, [r1, #16]
 8002fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bfb8      	it	lt
 8002fb4:	4613      	movlt	r3, r2
 8002fb6:	6033      	str	r3, [r6, #0]
 8002fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fbc:	4607      	mov	r7, r0
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	b10a      	cbz	r2, 8002fc6 <_printf_common+0x26>
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	6033      	str	r3, [r6, #0]
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	0699      	lsls	r1, r3, #26
 8002fca:	bf42      	ittt	mi
 8002fcc:	6833      	ldrmi	r3, [r6, #0]
 8002fce:	3302      	addmi	r3, #2
 8002fd0:	6033      	strmi	r3, [r6, #0]
 8002fd2:	6825      	ldr	r5, [r4, #0]
 8002fd4:	f015 0506 	ands.w	r5, r5, #6
 8002fd8:	d106      	bne.n	8002fe8 <_printf_common+0x48>
 8002fda:	f104 0a19 	add.w	sl, r4, #25
 8002fde:	68e3      	ldr	r3, [r4, #12]
 8002fe0:	6832      	ldr	r2, [r6, #0]
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	42ab      	cmp	r3, r5
 8002fe6:	dc26      	bgt.n	8003036 <_printf_common+0x96>
 8002fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fec:	1e13      	subs	r3, r2, #0
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	bf18      	it	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	0692      	lsls	r2, r2, #26
 8002ff6:	d42b      	bmi.n	8003050 <_printf_common+0xb0>
 8002ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	4638      	mov	r0, r7
 8003000:	47c0      	blx	r8
 8003002:	3001      	adds	r0, #1
 8003004:	d01e      	beq.n	8003044 <_printf_common+0xa4>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	6922      	ldr	r2, [r4, #16]
 800300a:	f003 0306 	and.w	r3, r3, #6
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf02      	ittt	eq
 8003012:	68e5      	ldreq	r5, [r4, #12]
 8003014:	6833      	ldreq	r3, [r6, #0]
 8003016:	1aed      	subeq	r5, r5, r3
 8003018:	68a3      	ldr	r3, [r4, #8]
 800301a:	bf0c      	ite	eq
 800301c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003020:	2500      	movne	r5, #0
 8003022:	4293      	cmp	r3, r2
 8003024:	bfc4      	itt	gt
 8003026:	1a9b      	subgt	r3, r3, r2
 8003028:	18ed      	addgt	r5, r5, r3
 800302a:	2600      	movs	r6, #0
 800302c:	341a      	adds	r4, #26
 800302e:	42b5      	cmp	r5, r6
 8003030:	d11a      	bne.n	8003068 <_printf_common+0xc8>
 8003032:	2000      	movs	r0, #0
 8003034:	e008      	b.n	8003048 <_printf_common+0xa8>
 8003036:	2301      	movs	r3, #1
 8003038:	4652      	mov	r2, sl
 800303a:	4649      	mov	r1, r9
 800303c:	4638      	mov	r0, r7
 800303e:	47c0      	blx	r8
 8003040:	3001      	adds	r0, #1
 8003042:	d103      	bne.n	800304c <_printf_common+0xac>
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304c:	3501      	adds	r5, #1
 800304e:	e7c6      	b.n	8002fde <_printf_common+0x3e>
 8003050:	18e1      	adds	r1, r4, r3
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	2030      	movs	r0, #48	; 0x30
 8003056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800305a:	4422      	add	r2, r4
 800305c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003064:	3302      	adds	r3, #2
 8003066:	e7c7      	b.n	8002ff8 <_printf_common+0x58>
 8003068:	2301      	movs	r3, #1
 800306a:	4622      	mov	r2, r4
 800306c:	4649      	mov	r1, r9
 800306e:	4638      	mov	r0, r7
 8003070:	47c0      	blx	r8
 8003072:	3001      	adds	r0, #1
 8003074:	d0e6      	beq.n	8003044 <_printf_common+0xa4>
 8003076:	3601      	adds	r6, #1
 8003078:	e7d9      	b.n	800302e <_printf_common+0x8e>
	...

0800307c <_printf_i>:
 800307c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003080:	7e0f      	ldrb	r7, [r1, #24]
 8003082:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003084:	2f78      	cmp	r7, #120	; 0x78
 8003086:	4691      	mov	r9, r2
 8003088:	4680      	mov	r8, r0
 800308a:	460c      	mov	r4, r1
 800308c:	469a      	mov	sl, r3
 800308e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003092:	d807      	bhi.n	80030a4 <_printf_i+0x28>
 8003094:	2f62      	cmp	r7, #98	; 0x62
 8003096:	d80a      	bhi.n	80030ae <_printf_i+0x32>
 8003098:	2f00      	cmp	r7, #0
 800309a:	f000 80d4 	beq.w	8003246 <_printf_i+0x1ca>
 800309e:	2f58      	cmp	r7, #88	; 0x58
 80030a0:	f000 80c0 	beq.w	8003224 <_printf_i+0x1a8>
 80030a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030ac:	e03a      	b.n	8003124 <_printf_i+0xa8>
 80030ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030b2:	2b15      	cmp	r3, #21
 80030b4:	d8f6      	bhi.n	80030a4 <_printf_i+0x28>
 80030b6:	a101      	add	r1, pc, #4	; (adr r1, 80030bc <_printf_i+0x40>)
 80030b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030bc:	08003115 	.word	0x08003115
 80030c0:	08003129 	.word	0x08003129
 80030c4:	080030a5 	.word	0x080030a5
 80030c8:	080030a5 	.word	0x080030a5
 80030cc:	080030a5 	.word	0x080030a5
 80030d0:	080030a5 	.word	0x080030a5
 80030d4:	08003129 	.word	0x08003129
 80030d8:	080030a5 	.word	0x080030a5
 80030dc:	080030a5 	.word	0x080030a5
 80030e0:	080030a5 	.word	0x080030a5
 80030e4:	080030a5 	.word	0x080030a5
 80030e8:	0800322d 	.word	0x0800322d
 80030ec:	08003155 	.word	0x08003155
 80030f0:	080031e7 	.word	0x080031e7
 80030f4:	080030a5 	.word	0x080030a5
 80030f8:	080030a5 	.word	0x080030a5
 80030fc:	0800324f 	.word	0x0800324f
 8003100:	080030a5 	.word	0x080030a5
 8003104:	08003155 	.word	0x08003155
 8003108:	080030a5 	.word	0x080030a5
 800310c:	080030a5 	.word	0x080030a5
 8003110:	080031ef 	.word	0x080031ef
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	602a      	str	r2, [r5, #0]
 800311c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003124:	2301      	movs	r3, #1
 8003126:	e09f      	b.n	8003268 <_printf_i+0x1ec>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	682b      	ldr	r3, [r5, #0]
 800312c:	0607      	lsls	r7, r0, #24
 800312e:	f103 0104 	add.w	r1, r3, #4
 8003132:	6029      	str	r1, [r5, #0]
 8003134:	d501      	bpl.n	800313a <_printf_i+0xbe>
 8003136:	681e      	ldr	r6, [r3, #0]
 8003138:	e003      	b.n	8003142 <_printf_i+0xc6>
 800313a:	0646      	lsls	r6, r0, #25
 800313c:	d5fb      	bpl.n	8003136 <_printf_i+0xba>
 800313e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003142:	2e00      	cmp	r6, #0
 8003144:	da03      	bge.n	800314e <_printf_i+0xd2>
 8003146:	232d      	movs	r3, #45	; 0x2d
 8003148:	4276      	negs	r6, r6
 800314a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800314e:	485a      	ldr	r0, [pc, #360]	; (80032b8 <_printf_i+0x23c>)
 8003150:	230a      	movs	r3, #10
 8003152:	e012      	b.n	800317a <_printf_i+0xfe>
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	6820      	ldr	r0, [r4, #0]
 8003158:	1d19      	adds	r1, r3, #4
 800315a:	6029      	str	r1, [r5, #0]
 800315c:	0605      	lsls	r5, r0, #24
 800315e:	d501      	bpl.n	8003164 <_printf_i+0xe8>
 8003160:	681e      	ldr	r6, [r3, #0]
 8003162:	e002      	b.n	800316a <_printf_i+0xee>
 8003164:	0641      	lsls	r1, r0, #25
 8003166:	d5fb      	bpl.n	8003160 <_printf_i+0xe4>
 8003168:	881e      	ldrh	r6, [r3, #0]
 800316a:	4853      	ldr	r0, [pc, #332]	; (80032b8 <_printf_i+0x23c>)
 800316c:	2f6f      	cmp	r7, #111	; 0x6f
 800316e:	bf0c      	ite	eq
 8003170:	2308      	moveq	r3, #8
 8003172:	230a      	movne	r3, #10
 8003174:	2100      	movs	r1, #0
 8003176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800317a:	6865      	ldr	r5, [r4, #4]
 800317c:	60a5      	str	r5, [r4, #8]
 800317e:	2d00      	cmp	r5, #0
 8003180:	bfa2      	ittt	ge
 8003182:	6821      	ldrge	r1, [r4, #0]
 8003184:	f021 0104 	bicge.w	r1, r1, #4
 8003188:	6021      	strge	r1, [r4, #0]
 800318a:	b90e      	cbnz	r6, 8003190 <_printf_i+0x114>
 800318c:	2d00      	cmp	r5, #0
 800318e:	d04b      	beq.n	8003228 <_printf_i+0x1ac>
 8003190:	4615      	mov	r5, r2
 8003192:	fbb6 f1f3 	udiv	r1, r6, r3
 8003196:	fb03 6711 	mls	r7, r3, r1, r6
 800319a:	5dc7      	ldrb	r7, [r0, r7]
 800319c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031a0:	4637      	mov	r7, r6
 80031a2:	42bb      	cmp	r3, r7
 80031a4:	460e      	mov	r6, r1
 80031a6:	d9f4      	bls.n	8003192 <_printf_i+0x116>
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d10b      	bne.n	80031c4 <_printf_i+0x148>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	07de      	lsls	r6, r3, #31
 80031b0:	d508      	bpl.n	80031c4 <_printf_i+0x148>
 80031b2:	6923      	ldr	r3, [r4, #16]
 80031b4:	6861      	ldr	r1, [r4, #4]
 80031b6:	4299      	cmp	r1, r3
 80031b8:	bfde      	ittt	le
 80031ba:	2330      	movle	r3, #48	; 0x30
 80031bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031c4:	1b52      	subs	r2, r2, r5
 80031c6:	6122      	str	r2, [r4, #16]
 80031c8:	f8cd a000 	str.w	sl, [sp]
 80031cc:	464b      	mov	r3, r9
 80031ce:	aa03      	add	r2, sp, #12
 80031d0:	4621      	mov	r1, r4
 80031d2:	4640      	mov	r0, r8
 80031d4:	f7ff fee4 	bl	8002fa0 <_printf_common>
 80031d8:	3001      	adds	r0, #1
 80031da:	d14a      	bne.n	8003272 <_printf_i+0x1f6>
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	b004      	add	sp, #16
 80031e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	f043 0320 	orr.w	r3, r3, #32
 80031ec:	6023      	str	r3, [r4, #0]
 80031ee:	4833      	ldr	r0, [pc, #204]	; (80032bc <_printf_i+0x240>)
 80031f0:	2778      	movs	r7, #120	; 0x78
 80031f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	6829      	ldr	r1, [r5, #0]
 80031fa:	061f      	lsls	r7, r3, #24
 80031fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003200:	d402      	bmi.n	8003208 <_printf_i+0x18c>
 8003202:	065f      	lsls	r7, r3, #25
 8003204:	bf48      	it	mi
 8003206:	b2b6      	uxthmi	r6, r6
 8003208:	07df      	lsls	r7, r3, #31
 800320a:	bf48      	it	mi
 800320c:	f043 0320 	orrmi.w	r3, r3, #32
 8003210:	6029      	str	r1, [r5, #0]
 8003212:	bf48      	it	mi
 8003214:	6023      	strmi	r3, [r4, #0]
 8003216:	b91e      	cbnz	r6, 8003220 <_printf_i+0x1a4>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f023 0320 	bic.w	r3, r3, #32
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	2310      	movs	r3, #16
 8003222:	e7a7      	b.n	8003174 <_printf_i+0xf8>
 8003224:	4824      	ldr	r0, [pc, #144]	; (80032b8 <_printf_i+0x23c>)
 8003226:	e7e4      	b.n	80031f2 <_printf_i+0x176>
 8003228:	4615      	mov	r5, r2
 800322a:	e7bd      	b.n	80031a8 <_printf_i+0x12c>
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	6826      	ldr	r6, [r4, #0]
 8003230:	6961      	ldr	r1, [r4, #20]
 8003232:	1d18      	adds	r0, r3, #4
 8003234:	6028      	str	r0, [r5, #0]
 8003236:	0635      	lsls	r5, r6, #24
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	d501      	bpl.n	8003240 <_printf_i+0x1c4>
 800323c:	6019      	str	r1, [r3, #0]
 800323e:	e002      	b.n	8003246 <_printf_i+0x1ca>
 8003240:	0670      	lsls	r0, r6, #25
 8003242:	d5fb      	bpl.n	800323c <_printf_i+0x1c0>
 8003244:	8019      	strh	r1, [r3, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	6123      	str	r3, [r4, #16]
 800324a:	4615      	mov	r5, r2
 800324c:	e7bc      	b.n	80031c8 <_printf_i+0x14c>
 800324e:	682b      	ldr	r3, [r5, #0]
 8003250:	1d1a      	adds	r2, r3, #4
 8003252:	602a      	str	r2, [r5, #0]
 8003254:	681d      	ldr	r5, [r3, #0]
 8003256:	6862      	ldr	r2, [r4, #4]
 8003258:	2100      	movs	r1, #0
 800325a:	4628      	mov	r0, r5
 800325c:	f7fc ffe8 	bl	8000230 <memchr>
 8003260:	b108      	cbz	r0, 8003266 <_printf_i+0x1ea>
 8003262:	1b40      	subs	r0, r0, r5
 8003264:	6060      	str	r0, [r4, #4]
 8003266:	6863      	ldr	r3, [r4, #4]
 8003268:	6123      	str	r3, [r4, #16]
 800326a:	2300      	movs	r3, #0
 800326c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003270:	e7aa      	b.n	80031c8 <_printf_i+0x14c>
 8003272:	6923      	ldr	r3, [r4, #16]
 8003274:	462a      	mov	r2, r5
 8003276:	4649      	mov	r1, r9
 8003278:	4640      	mov	r0, r8
 800327a:	47d0      	blx	sl
 800327c:	3001      	adds	r0, #1
 800327e:	d0ad      	beq.n	80031dc <_printf_i+0x160>
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	079b      	lsls	r3, r3, #30
 8003284:	d413      	bmi.n	80032ae <_printf_i+0x232>
 8003286:	68e0      	ldr	r0, [r4, #12]
 8003288:	9b03      	ldr	r3, [sp, #12]
 800328a:	4298      	cmp	r0, r3
 800328c:	bfb8      	it	lt
 800328e:	4618      	movlt	r0, r3
 8003290:	e7a6      	b.n	80031e0 <_printf_i+0x164>
 8003292:	2301      	movs	r3, #1
 8003294:	4632      	mov	r2, r6
 8003296:	4649      	mov	r1, r9
 8003298:	4640      	mov	r0, r8
 800329a:	47d0      	blx	sl
 800329c:	3001      	adds	r0, #1
 800329e:	d09d      	beq.n	80031dc <_printf_i+0x160>
 80032a0:	3501      	adds	r5, #1
 80032a2:	68e3      	ldr	r3, [r4, #12]
 80032a4:	9903      	ldr	r1, [sp, #12]
 80032a6:	1a5b      	subs	r3, r3, r1
 80032a8:	42ab      	cmp	r3, r5
 80032aa:	dcf2      	bgt.n	8003292 <_printf_i+0x216>
 80032ac:	e7eb      	b.n	8003286 <_printf_i+0x20a>
 80032ae:	2500      	movs	r5, #0
 80032b0:	f104 0619 	add.w	r6, r4, #25
 80032b4:	e7f5      	b.n	80032a2 <_printf_i+0x226>
 80032b6:	bf00      	nop
 80032b8:	080033e9 	.word	0x080033e9
 80032bc:	080033fa 	.word	0x080033fa

080032c0 <memmove>:
 80032c0:	4288      	cmp	r0, r1
 80032c2:	b510      	push	{r4, lr}
 80032c4:	eb01 0402 	add.w	r4, r1, r2
 80032c8:	d902      	bls.n	80032d0 <memmove+0x10>
 80032ca:	4284      	cmp	r4, r0
 80032cc:	4623      	mov	r3, r4
 80032ce:	d807      	bhi.n	80032e0 <memmove+0x20>
 80032d0:	1e43      	subs	r3, r0, #1
 80032d2:	42a1      	cmp	r1, r4
 80032d4:	d008      	beq.n	80032e8 <memmove+0x28>
 80032d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032de:	e7f8      	b.n	80032d2 <memmove+0x12>
 80032e0:	4402      	add	r2, r0
 80032e2:	4601      	mov	r1, r0
 80032e4:	428a      	cmp	r2, r1
 80032e6:	d100      	bne.n	80032ea <memmove+0x2a>
 80032e8:	bd10      	pop	{r4, pc}
 80032ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032f2:	e7f7      	b.n	80032e4 <memmove+0x24>

080032f4 <_sbrk_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4d06      	ldr	r5, [pc, #24]	; (8003310 <_sbrk_r+0x1c>)
 80032f8:	2300      	movs	r3, #0
 80032fa:	4604      	mov	r4, r0
 80032fc:	4608      	mov	r0, r1
 80032fe:	602b      	str	r3, [r5, #0]
 8003300:	f7fd fda6 	bl	8000e50 <_sbrk>
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	d102      	bne.n	800330e <_sbrk_r+0x1a>
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	b103      	cbz	r3, 800330e <_sbrk_r+0x1a>
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	20001438 	.word	0x20001438

08003314 <memcpy>:
 8003314:	440a      	add	r2, r1
 8003316:	4291      	cmp	r1, r2
 8003318:	f100 33ff 	add.w	r3, r0, #4294967295
 800331c:	d100      	bne.n	8003320 <memcpy+0xc>
 800331e:	4770      	bx	lr
 8003320:	b510      	push	{r4, lr}
 8003322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800332a:	4291      	cmp	r1, r2
 800332c:	d1f9      	bne.n	8003322 <memcpy+0xe>
 800332e:	bd10      	pop	{r4, pc}

08003330 <_realloc_r>:
 8003330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003334:	4680      	mov	r8, r0
 8003336:	4614      	mov	r4, r2
 8003338:	460e      	mov	r6, r1
 800333a:	b921      	cbnz	r1, 8003346 <_realloc_r+0x16>
 800333c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003340:	4611      	mov	r1, r2
 8003342:	f7ff bc49 	b.w	8002bd8 <_malloc_r>
 8003346:	b92a      	cbnz	r2, 8003354 <_realloc_r+0x24>
 8003348:	f7ff fbda 	bl	8002b00 <_free_r>
 800334c:	4625      	mov	r5, r4
 800334e:	4628      	mov	r0, r5
 8003350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003354:	f000 f81b 	bl	800338e <_malloc_usable_size_r>
 8003358:	4284      	cmp	r4, r0
 800335a:	4607      	mov	r7, r0
 800335c:	d802      	bhi.n	8003364 <_realloc_r+0x34>
 800335e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003362:	d812      	bhi.n	800338a <_realloc_r+0x5a>
 8003364:	4621      	mov	r1, r4
 8003366:	4640      	mov	r0, r8
 8003368:	f7ff fc36 	bl	8002bd8 <_malloc_r>
 800336c:	4605      	mov	r5, r0
 800336e:	2800      	cmp	r0, #0
 8003370:	d0ed      	beq.n	800334e <_realloc_r+0x1e>
 8003372:	42bc      	cmp	r4, r7
 8003374:	4622      	mov	r2, r4
 8003376:	4631      	mov	r1, r6
 8003378:	bf28      	it	cs
 800337a:	463a      	movcs	r2, r7
 800337c:	f7ff ffca 	bl	8003314 <memcpy>
 8003380:	4631      	mov	r1, r6
 8003382:	4640      	mov	r0, r8
 8003384:	f7ff fbbc 	bl	8002b00 <_free_r>
 8003388:	e7e1      	b.n	800334e <_realloc_r+0x1e>
 800338a:	4635      	mov	r5, r6
 800338c:	e7df      	b.n	800334e <_realloc_r+0x1e>

0800338e <_malloc_usable_size_r>:
 800338e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003392:	1f18      	subs	r0, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	bfbc      	itt	lt
 8003398:	580b      	ldrlt	r3, [r1, r0]
 800339a:	18c0      	addlt	r0, r0, r3
 800339c:	4770      	bx	lr
	...

080033a0 <_init>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr

080033ac <_fini>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr
